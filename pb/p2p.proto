// This is for P2P
syntax = "proto3";

import "common.proto";

package pb;

message BeaconVersionMessage {
    uint64 Version = 1;
    bytes GenesisHash = 2;
    uint64 Height = 3;
}

message ShardVersionMessage {
    uint64 Version = 1;
    uint64 Height = 2;
}

message RelayerVersionMessage {
    uint64 Version = 1;
    bool Provider = 2; // determines whether relayer is a provider
    bytes PeerID = 3;
    bytes PeerInfo = 4;
}

message PingMessage {
    uint64 Nonce = 1;
}

message PongMessage {
    uint64 Nonce = 1;
}

message RejectMessage {
    string Message = 1;
}

message AttestationMempoolItem {
    bytes AttestationHash = 1;
    bytes Participation = 2;
}

// This will advertise which mempool items the client needs/has.
message GetAttestationMempoolMessage {
    repeated AttestationMempoolItem Attestations = 1;
}

message AttestationMempoolMessage {
    repeated Attestation Attestations = 1;
}

message GetBlocksMessage {
    repeated bytes LocatorHashes = 1; //block locator object; newest back to genesis block (dense to start, but then sparse)
    bytes HashStop = 2; //hash of the last desired block header; set to zero to get as many blocks as possible (2000)
}

// Response to GetBlockMessage
message BeaconBlockMessage {
    repeated Block Blocks = 1;
    bytes LatestBlockHash = 2;
}

message GetShardBlocksMessage {
    bytes StartHash = 1; // we start at this hash (shard client might not want to sync entire chain)
    repeated bytes LocatorHashes = 2;
    bytes HashStop = 3;
}

message ShardBlockMessage {
    repeated ShardBlock Blocks = 1;
    bytes LatestBlockHash = 2;
}

message GetPackagesMessage {
    bytes TipStateRoot = 1;
}

message PackageMessage {
    TransactionPackage Package = 1;
    uint64 StartSlot = 2;
}

message SubmitTransaction {
    ShardTransaction Transaction = 1;
}

message GetShardCodeMessage {
    uint64 ShardID = 1;
    bytes Hash = 2;
}

message ShardCodeMessage {
    uint64 ShardID = 1;
    bytes Code = 2;
}

syntax = "proto3";

package pb;

import "google/protobuf/empty.proto";

service BlockchainRPC {
    rpc SubmitBlock(SubmitBlockRequest) returns (SubmitBlockResponse);

    rpc GetSlotNumber(google.protobuf.Empty) returns (SlotNumberResponse);

    rpc GetBlockHash(GetBlockHashRequest) returns (GetBlockHashResponse);

    rpc GetSlotAndShardAssignment(GetSlotAndShardAssignmentRequest) returns (SlotAndShardAssignment);

    rpc GetValidatorAtIndex(GetValidatorAtIndexRequest) returns (GetValidatorAtIndexResponse);

    rpc GetCommitteeValidators(GetCommitteeValidatorsRequest) returns (GetCommitteeValidatorsResponse);
}

service P2PRPC {
    rpc GetConnectionStatus(google.protobuf.Empty) returns (ConnectionStatus);

    rpc GetPeers(google.protobuf.Empty) returns (GetPeersResponse);

    rpc Subscribe(SubscriptionRequest) returns (Subscription);

    rpc ListenForMessages(Subscription) returns (stream Message);

    rpc Unsubscribe(Subscription) returns (google.protobuf.Empty);

    rpc Connect(Peers) returns (ConnectResponse);

    rpc GetSettings(google.protobuf.Empty) returns (P2PSettings);

    rpc Broadcast(MessageAndTopic) returns (google.protobuf.Empty);
}

message ConnectionStatus {
    bool Connected = 1;
}

message Peer {
    string Address = 1;
}

message SubscriptionRequest {
    string Topic = 1;
}

message Subscription {
    uint64 ID = 1;
}

message GetPeersResponse {
    repeated Peer Peers = 1;
}

message Message {
    bytes Data = 1;
}

message MessageAndTopic {
    bytes Data = 1;
    string Topic = 2;
}

message Peers {
    repeated Peer Peers = 1;
}

message ConnectResponse {
    bool Success = 1;
}

message DisconnectResponse {
    bool Success = 1;
}

message P2PSettings {
}

enum Role {
    ATTESTER = 0;
    PROPOSER = 1;
}

message GetSlotAndShardAssignmentRequest {
    uint32 ValidatorID = 1;
}

message SlotAndShardAssignment {
    uint32 ShardID = 1;
    uint64 Slot = 2;
    Role Role = 3;
}

message SubmitBlockRequest {
    Block Block = 1;
}

message SubmitBlockResponse {
    bytes BlockHash = 1;
}

message SlotNumberResponse {
    uint64 SlotNumber = 1;
}

message GetBlockHashRequest {
    uint64 SlotNumber = 1;
}

message GetBlockHashResponse {
    bytes Hash = 1;
}

message ValidatorResponse {
    uint32 Pubkey = 1; // use uint32 as placeholder, will use bls.PublicKey after it's determined.
    bytes WithdrawalCredentials = 2;
    bytes RandaoCommitment = 4;
    uint64 RandaoLastChange = 5;
    uint64 Balance = 6;
    uint32 Status = 7;
    uint64 ExitSeq = 8;
}

message GetValidatorAtIndexRequest {
    uint32 Index = 1;
}

message GetValidatorAtIndexResponse {
    ValidatorResponse Validator = 1;
}

message GetCommitteeValidatorsRequest {
    uint64 SlotNumber = 1;
    uint32 Shard = 2;
}

message GetCommitteeValidatorsResponse {
    repeated ValidatorResponse Validators = 1;
}

message Block {
    uint64 SlotNumber = 1;
    bytes RandaoReveal = 2;
    repeated bytes AncestorHashes = 3;
    bytes ActiveStateRoot = 4;
    bytes CrystallizedStateRoot = 5;
    repeated AttestationRecord Attestations = 6;
    repeated Special Specials = 7;
}

message Special {
    uint32 Type = 1;
    repeated bytes Data = 2;
}

message AttestationSignedData {
    uint32 Version = 1;
    uint64 Slot = 2;
    uint64 Shard = 3;
    repeated bytes ParentHashes = 4;
    bytes ShardBlockHash = 5;
    uint64 JustifiedSlot = 6;
}

message AttestationRecord {
    AttestationSignedData Data = 1;
    bytes AttesterBitfield = 2;
    bytes PoCBitfield = 3;
    bytes AggregateSig = 4;
}

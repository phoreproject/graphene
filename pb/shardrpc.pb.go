// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shardrpc.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlockHashResponse struct {
	BlockHash            []byte   `protobuf:"bytes,1,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHashResponse) Reset()         { *m = BlockHashResponse{} }
func (m *BlockHashResponse) String() string { return proto.CompactTextString(m) }
func (*BlockHashResponse) ProtoMessage()    {}
func (*BlockHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_shardrpc_3234c0cd1ce058d6, []int{0}
}
func (m *BlockHashResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHashResponse.Unmarshal(m, b)
}
func (m *BlockHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHashResponse.Marshal(b, m, deterministic)
}
func (dst *BlockHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHashResponse.Merge(dst, src)
}
func (m *BlockHashResponse) XXX_Size() int {
	return xxx_messageInfo_BlockHashResponse.Size(m)
}
func (m *BlockHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHashResponse proto.InternalMessageInfo

func (m *BlockHashResponse) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type SlotRequest struct {
	Shard                uint64   `protobuf:"varint,1,opt,name=Shard,proto3" json:"Shard,omitempty"`
	Slot                 uint64   `protobuf:"varint,2,opt,name=Slot,proto3" json:"Slot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlotRequest) Reset()         { *m = SlotRequest{} }
func (m *SlotRequest) String() string { return proto.CompactTextString(m) }
func (*SlotRequest) ProtoMessage()    {}
func (*SlotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_shardrpc_3234c0cd1ce058d6, []int{1}
}
func (m *SlotRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SlotRequest.Unmarshal(m, b)
}
func (m *SlotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SlotRequest.Marshal(b, m, deterministic)
}
func (dst *SlotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotRequest.Merge(dst, src)
}
func (m *SlotRequest) XXX_Size() int {
	return xxx_messageInfo_SlotRequest.Size(m)
}
func (m *SlotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SlotRequest proto.InternalMessageInfo

func (m *SlotRequest) GetShard() uint64 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *SlotRequest) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type ShardSubscription struct {
	ShardID              uint64   `protobuf:"varint,1,opt,name=ShardID,proto3" json:"ShardID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardSubscription) Reset()         { *m = ShardSubscription{} }
func (m *ShardSubscription) String() string { return proto.CompactTextString(m) }
func (*ShardSubscription) ProtoMessage()    {}
func (*ShardSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_shardrpc_3234c0cd1ce058d6, []int{2}
}
func (m *ShardSubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShardSubscription.Unmarshal(m, b)
}
func (m *ShardSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShardSubscription.Marshal(b, m, deterministic)
}
func (dst *ShardSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardSubscription.Merge(dst, src)
}
func (m *ShardSubscription) XXX_Size() int {
	return xxx_messageInfo_ShardSubscription.Size(m)
}
func (m *ShardSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_ShardSubscription proto.InternalMessageInfo

func (m *ShardSubscription) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func init() {
	proto.RegisterType((*BlockHashResponse)(nil), "pb.BlockHashResponse")
	proto.RegisterType((*SlotRequest)(nil), "pb.SlotRequest")
	proto.RegisterType((*ShardSubscription)(nil), "pb.ShardSubscription")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShardRPCClient is the client API for ShardRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShardRPCClient interface {
	SubscribeToShard(ctx context.Context, in *ShardSubscription, opts ...grpc.CallOption) (*empty.Empty, error)
	UnsubscribeFromShard(ctx context.Context, in *ShardSubscription, opts ...grpc.CallOption) (*empty.Empty, error)
	GetBlockHashAtSlot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*BlockHashResponse, error)
	GenerateBlockTemplate(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*ShardBlock, error)
	SubmitBlock(ctx context.Context, in *ShardBlock, opts ...grpc.CallOption) (*empty.Empty, error)
}

type shardRPCClient struct {
	cc *grpc.ClientConn
}

func NewShardRPCClient(cc *grpc.ClientConn) ShardRPCClient {
	return &shardRPCClient{cc}
}

func (c *shardRPCClient) SubscribeToShard(ctx context.Context, in *ShardSubscription, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.ShardRPC/SubscribeToShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardRPCClient) UnsubscribeFromShard(ctx context.Context, in *ShardSubscription, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.ShardRPC/UnsubscribeFromShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardRPCClient) GetBlockHashAtSlot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*BlockHashResponse, error) {
	out := new(BlockHashResponse)
	err := c.cc.Invoke(ctx, "/pb.ShardRPC/GetBlockHashAtSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardRPCClient) GenerateBlockTemplate(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*ShardBlock, error) {
	out := new(ShardBlock)
	err := c.cc.Invoke(ctx, "/pb.ShardRPC/GenerateBlockTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardRPCClient) SubmitBlock(ctx context.Context, in *ShardBlock, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.ShardRPC/SubmitBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardRPCServer is the server API for ShardRPC service.
type ShardRPCServer interface {
	SubscribeToShard(context.Context, *ShardSubscription) (*empty.Empty, error)
	UnsubscribeFromShard(context.Context, *ShardSubscription) (*empty.Empty, error)
	GetBlockHashAtSlot(context.Context, *SlotRequest) (*BlockHashResponse, error)
	GenerateBlockTemplate(context.Context, *SlotRequest) (*ShardBlock, error)
	SubmitBlock(context.Context, *ShardBlock) (*empty.Empty, error)
}

func RegisterShardRPCServer(s *grpc.Server, srv ShardRPCServer) {
	s.RegisterService(&_ShardRPC_serviceDesc, srv)
}

func _ShardRPC_SubscribeToShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardRPCServer).SubscribeToShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShardRPC/SubscribeToShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardRPCServer).SubscribeToShard(ctx, req.(*ShardSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardRPC_UnsubscribeFromShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardRPCServer).UnsubscribeFromShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShardRPC/UnsubscribeFromShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardRPCServer).UnsubscribeFromShard(ctx, req.(*ShardSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardRPC_GetBlockHashAtSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardRPCServer).GetBlockHashAtSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShardRPC/GetBlockHashAtSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardRPCServer).GetBlockHashAtSlot(ctx, req.(*SlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardRPC_GenerateBlockTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardRPCServer).GenerateBlockTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShardRPC/GenerateBlockTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardRPCServer).GenerateBlockTemplate(ctx, req.(*SlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardRPC_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardRPCServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShardRPC/SubmitBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardRPCServer).SubmitBlock(ctx, req.(*ShardBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShardRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ShardRPC",
	HandlerType: (*ShardRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribeToShard",
			Handler:    _ShardRPC_SubscribeToShard_Handler,
		},
		{
			MethodName: "UnsubscribeFromShard",
			Handler:    _ShardRPC_UnsubscribeFromShard_Handler,
		},
		{
			MethodName: "GetBlockHashAtSlot",
			Handler:    _ShardRPC_GetBlockHashAtSlot_Handler,
		},
		{
			MethodName: "GenerateBlockTemplate",
			Handler:    _ShardRPC_GenerateBlockTemplate_Handler,
		},
		{
			MethodName: "SubmitBlock",
			Handler:    _ShardRPC_SubmitBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shardrpc.proto",
}

func init() { proto.RegisterFile("shardrpc.proto", fileDescriptor_shardrpc_3234c0cd1ce058d6) }

var fileDescriptor_shardrpc_3234c0cd1ce058d6 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0x03, 0xc1, 0x7f, 0x03, 0x41, 0x99, 0x80, 0x21, 0xd5, 0x83, 0xe1, 0xe4, 0xc5, 0x12,
	0x35, 0x46, 0x0f, 0x5e, 0x50, 0x11, 0xbd, 0x99, 0x16, 0x1f, 0xa0, 0x5b, 0x47, 0x20, 0xb6, 0x9d,
	0xb5, 0xbb, 0x3d, 0xf8, 0x7c, 0xbe, 0x98, 0xe9, 0x2c, 0x7f, 0x12, 0x1b, 0x2f, 0xde, 0x76, 0xbe,
	0xf9, 0xf6, 0x37, 0xf3, 0x0d, 0xb4, 0xcd, 0x3c, 0xca, 0xdf, 0x72, 0x1d, 0xfb, 0x3a, 0x67, 0xcb,
	0x58, 0xd7, 0xca, 0x3b, 0x9a, 0x31, 0xcf, 0x12, 0x1a, 0x8a, 0xa2, 0x8a, 0xf7, 0x21, 0xa5, 0xda,
	0x7e, 0x39, 0x83, 0xd7, 0x8a, 0x39, 0x4d, 0x39, 0x73, 0xd5, 0xe0, 0x1c, 0x3a, 0x77, 0x09, 0xc7,
	0x1f, 0x4f, 0x91, 0x99, 0x07, 0x64, 0x34, 0x67, 0x86, 0xf0, 0x18, 0xf6, 0xd6, 0x62, 0xbf, 0x76,
	0x52, 0x3b, 0x6d, 0x05, 0x1b, 0x61, 0x70, 0x0d, 0xcd, 0x30, 0x61, 0x1b, 0xd0, 0x67, 0x41, 0xc6,
	0x62, 0x17, 0xb6, 0xc2, 0x72, 0x05, 0x31, 0x36, 0x02, 0x57, 0x20, 0x42, 0xa3, 0x34, 0xf5, 0xeb,
	0x22, 0xca, 0x7b, 0x70, 0x06, 0x1d, 0x69, 0x86, 0x85, 0x32, 0x71, 0xbe, 0xd0, 0x76, 0xc1, 0x19,
	0xf6, 0x61, 0x47, 0xc4, 0xe7, 0x87, 0x25, 0x60, 0x55, 0x5e, 0x7c, 0xd7, 0x61, 0x57, 0xde, 0xc1,
	0xcb, 0x3d, 0x8e, 0xe0, 0x60, 0xf9, 0x4d, 0xd1, 0x94, 0xdd, 0x8c, 0x9e, 0xaf, 0x95, 0x5f, 0x21,
	0x7a, 0x87, 0xbe, 0x8b, 0xef, 0xaf, 0xe2, 0xfb, 0xe3, 0x32, 0x3e, 0x8e, 0xa1, 0xfb, 0x9a, 0x99,
	0x15, 0xe4, 0x31, 0xe7, 0xf4, 0x5f, 0x98, 0x5b, 0xc0, 0x09, 0xd9, 0xf5, 0x39, 0x46, 0xb6, 0xcc,
	0x86, 0xfb, 0x02, 0xd9, 0x9c, 0xc5, 0x13, 0x6a, 0xf5, 0xb4, 0x37, 0xd0, 0x9b, 0x50, 0x46, 0x79,
	0x64, 0x49, 0x9a, 0x53, 0x4a, 0x75, 0x12, 0x59, 0xaa, 0x02, 0xda, 0xeb, 0xb5, 0xc4, 0x88, 0x57,
	0xd0, 0x0c, 0x0b, 0x95, 0x2e, 0xdc, 0x68, 0xfc, 0xd5, 0xfe, 0x6b, 0x5d, 0xb5, 0x2d, 0xf5, 0xe5,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x22, 0x9c, 0x23, 0x28, 0x02, 0x00, 0x00,
}

syntax = "proto3";

package pb;

import "google/protobuf/empty.proto";
import "common.proto";

service BlockchainRPC {
    rpc SubmitBlock(SubmitBlockRequest) returns (SubmitBlockResponse);

    rpc GetSlotNumber(google.protobuf.Empty) returns (SlotNumberResponse);

    rpc GetBlockHash(GetBlockHashRequest) returns (GetBlockHashResponse);

    rpc GetLastBlockHash(google.protobuf.Empty) returns (GetBlockHashResponse);

    rpc GetState(google.protobuf.Empty) returns (GetStateResponse);

    rpc GetStateRoot(google.protobuf.Empty) returns (GetStateRootResponse);

    rpc GetEpochInformation(EpochInformationRequest) returns (EpochInformationResponse);

    rpc GetForkData(google.protobuf.Empty) returns (ForkData);

    rpc GetProposerForSlot(GetProposerForSlotRequest) returns (GetProposerForSlotResponse);

    rpc GetShardProposerForSlot(GetShardProposerRequest) returns (ShardProposerResponse);

    rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);

    rpc SubmitAttestation(Attestation) returns (google.protobuf.Empty);

    rpc GetMempool(MempoolRequest) returns (BlockBody);

    rpc GetValidatorInformation(GetValidatorRequest) returns (Validator);
}

message GetShardProposerRequest {
    uint64 ShardID = 1;
    uint64 Slot = 2;
}

message ShardProposerResponse {
    uint32 Proposer = 1;
    bytes ProposerPublicKey = 2;
}

message MempoolRequest {
    bytes LastBlockHash = 1;
}

message GetValidatorRequest {
    uint32 ID = 1;
}

message GetBlockRequest {
    bytes Hash = 1;
}

message GetBlockResponse {
    Block Block = 1;
}

message GetProposerForSlotRequest {
    uint64 Slot = 1;
}

message GetProposerForSlotResponse {
    uint32 Proposer = 1;
}

message EpochInformationRequest {
    uint64 EpochIndex = 1;
}

message EpochInformationResponse {
    bool HasEpochInformation = 1;
    EpochInformation Information = 2;
}

message EpochInformation {
    repeated ShardCommitteesForSlot ShardCommitteesForSlots = 1;
    int64 Slot = 2;
    repeated Crosslink LatestCrosslinks = 3;
    uint64 JustifiedEpoch = 4;
    bytes JustifiedHash = 5;
    bytes TargetHash = 6;
    bytes PreviousTargetHash = 7;
    uint64 PreviousJustifiedEpoch = 8;
    bytes PreviousJustifiedHash = 9;
    repeated Crosslink PreviousCrosslinks = 10;
}

message DisconnectResponse {
    bool Success = 1;
}

message GetCommitteesForSlotRequest {
    uint64 Slot = 1;
}

message GetSlotAndShardAssignmentRequest {
    uint32 ValidatorID = 1;
}

message SubmitBlockRequest {
    Block Block = 1;
}

message SubmitBlockResponse {
    bytes BlockHash = 1;
}

message SlotNumberResponse {
    uint64 SlotNumber = 1;
    bytes BlockHash = 2;
}

message GetBlockHashRequest {
    uint64 SlotNumber = 1;
}

message GetBlockHashResponse {
    bytes Hash = 1;
}

message GetValidatorAtIndexRequest {
    uint32 Index = 1;
}

message GetValidatorAtIndexResponse {
    Validator Validator = 1;
}

message GetCommitteeValidatorsRequest {
    uint64 SlotNumber = 1;
    uint32 Shard = 2;
}

message GetStateResponse {
    State state = 1;
}

message GetStateRootResponse {
    bytes StateRoot = 1;
}

message GetCommitteeValidatorsResponse {
    repeated Validator Validators = 1;
}

message GetCommitteeValidatorIndicesResponse {
    repeated uint32 Validators = 1;
}

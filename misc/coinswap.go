package misc

// This file is for swapping coins from Phore to Synapse

import (
	"github.com/phoreproject/synapse/chainhash"
)

type proofEntry struct {
	hash *chainhash.Hash
	left bool
}

func computeCombinedHash(left *chainhash.Hash, right *chainhash.Hash) chainhash.Hash {
	h := chainhash.HashH(chainhash.HashB(append(left[:], right[:]...)))
	return h
}

func computeProofRootHash(hash *chainhash.Hash, entries []proofEntry) chainhash.Hash {
	h := *hash
	for i := 0; i < len(entries); i++ {
		if entries[i].left {
			//fmt.Printf("Input L: %s R: %s\n", entries[i].hash.String(), h.String())
			h = computeCombinedHash(entries[i].hash, &h)
			//fmt.Printf("L compute: %s L\n", h.String())
		} else {
			//fmt.Printf("Input L: %s R: %s\n", h.String(), entries[i].hash.String())
			h = computeCombinedHash(&h, entries[i].hash)
			//fmt.Printf("R compute: %s\n", h.String())
		}
	}
	return h
}

// The text is generated by SynapseSwap::proofListToText in C++
func textToProofList(text string) []proofEntry {
	proofList := []proofEntry{}

	for i := 0; i <= len(text)-65; i += 65 {
		direction := text[i : i+1]
		hex := text[i+1 : i+65]
		entry := proofEntry{}
		entry.left = (direction == "L")
		entry.hash, _ = chainhash.NewHashFromStr(hex)
		proofList = append(proofList, entry)
	}

	/*
		for i := 0; i < len(proofList); i++ {
			e := proofList[i]
			a := 0
			if e.left {
				a = 1
			}
			fmt.Printf("%02d %d %s\n", i, a, e.hash.String())
		}
	*/

	return proofList
}
